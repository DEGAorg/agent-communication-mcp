name: Unit Tests & Integration CI

on:
  push:
    branches: [ main, uat, develop, feature/docker ]
  pull_request:
    branches: [ main, uat, develop, feature/docker ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    name: Unit Tests & Type Checking

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Enable Corepack for Yarn 4
      run: |
        echo "Enabling Corepack for Yarn 4..."
        corepack enable
        corepack prepare yarn@4 --activate

    - name: Setup Yarn 4 cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Yarn 4..."
        yarn install --immutable

    - name: Run TypeScript type checking
      run: |
        echo "Running TypeScript type checking..."
        yarn tsc --noEmit

    - name: Run linting
      run: |
        echo "Running ESLint..."
        yarn lint

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        yarn test

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        yarn test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-tests-coverage

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    name: Integration Tests
    needs: unit-tests

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Enable Corepack for Yarn 4
      run: |
        echo "Enabling Corepack for Yarn 4..."
        corepack enable
        corepack prepare yarn@4 --activate

    - name: Setup Yarn 4 cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Yarn 4..."
        yarn install --immutable

    - name: Build project
      run: |
        echo "Building project..."
        yarn build

    - name: Verify build output
      run: |
        echo "Verifying build output..."
        ls -la dist/
        ls -la dist/zk/proofs/ || echo "ZK proofs directory not found"

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        yarn test:file

    - name: Test CLI tools
      run: |
        echo "Testing CLI tools..."
        yarn keys:generate --help || echo "CLI help command executed"

  docker-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    name: Docker Build & Validation
    needs: unit-tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t agent-communication-mcp-test .

    - name: Validate Docker image
      run: |
        echo "Validating Docker image..."
        docker run --rm agent-communication-mcp-test node --version
        docker run --rm agent-communication-mcp-test yarn --version

    - name: Test Docker build process
      run: |
        echo "Testing Docker build process..."
        docker run --rm agent-communication-mcp-test yarn build

    - name: Test Docker test execution
      run: |
        echo "Testing Docker test execution..."
        docker run --rm agent-communication-mcp-test yarn test:coverage

  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Security & Quality Checks
    needs: unit-tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    - name: Enable Corepack for Yarn 4
      run: |
        echo "Enabling Corepack for Yarn 4..."
        corepack enable
        corepack prepare yarn@4 --activate

    - name: Setup Yarn 4 cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Yarn 4..."
        yarn install --immutable

    - name: Check for security vulnerabilities
      run: |
        echo "Checking for security vulnerabilities..."
        echo "Running yarn npm audit with moderate severity..."
        yarn npm audit --severity moderate || echo "⚠️ Security vulnerabilities found - review required"
        
        echo "Checking for outdated packages..."
        yarn outdated || echo "ℹ️ Some packages may be outdated"
        
        echo "Checking for duplicate packages..."
        yarn dedupe --check || echo "ℹ️ Duplicate packages found"

    - name: Check package.json consistency
      run: |
        echo "Checking package.json consistency..."
        echo "Available scripts:"
        yarn run --silent | grep -E "^  [a-z]" || echo "No scripts found"
        echo "Dependencies count: $(jq '.dependencies | length' package.json)"
        echo "DevDependencies count: $(jq '.devDependencies | length' package.json)"

    - name: Validate project structure
      run: |
        echo "Validating project structure..."
        if [ -f "package.json" ] && [ -d "src" ] && [ -d "test" ]; then
          echo "✅ Project structure is valid"
        else
          echo "❌ Project structure is invalid"
          exit 1
        fi

    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        if [ -f ".env" ] || [ -f ".env.local" ] || [ -f ".env.production" ]; then
          echo "⚠️ Environment files found - ensure they are properly gitignored"
        else
          echo "✅ No environment files found in repository"
        fi
        
        echo "Checking for hardcoded secrets..."
        if grep -r "password\|secret\|key\|token" src/ --include="*.ts" --include="*.js" | grep -v "//\|/\*" | grep -v "test\|example"; then
          echo "⚠️ Potential hardcoded secrets found - review required"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi
        
        echo "Checking for console.log statements in production code..."
        if grep -r "console.log\|console.error\|console.warn" src/ --include="*.ts" --include="*.js" | grep -v "//\|/\*" | grep -v "test\|example"; then
          echo "⚠️ Console statements found in production code - consider removing"
        else
          echo "✅ No console statements in production code"
        fi

  advanced-security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    name: Advanced Security Scan
    needs: unit-tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    - name: Enable Corepack for Yarn 4
      run: |
        echo "Enabling Corepack for Yarn 4..."
        corepack enable
        corepack prepare yarn@4 --activate

    - name: Setup Yarn 4 cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Yarn 4..."
        yarn install --immutable

    - name: Deep security audit
      run: |
        echo "Running deep security audit..."
        echo "Checking for known vulnerabilities in all dependencies..."
        yarn npm audit --severity high || echo "⚠️ High severity vulnerabilities found"
        
        echo "Checking for license compliance..."
        yarn licenses list --json | jq '.data | group_by(.license) | map({license: .[0].license, count: length})' || echo "ℹ️ License information available"
        
        echo "Checking for suspicious package names..."
        yarn list --depth=0 | grep -i "suspicious\|malicious\|test\|example" || echo "ℹ️ No suspicious packages found"

    - name: Code security analysis
      run: |
        echo "Analyzing code for security issues..."
        echo "Checking for potential SQL injection patterns..."
        if grep -r "SELECT\|INSERT\|UPDATE\|DELETE" src/ --include="*.ts" --include="*.js" | grep -v "//\|/\*" | grep -v "test\|example"; then
          echo "⚠️ SQL-like patterns found - ensure proper parameterization"
        else
          echo "✅ No obvious SQL injection patterns"
        fi
        
        echo "Checking for eval() usage..."
        if grep -r "eval(" src/ --include="*.ts" --include="*.js" | grep -v "//\|/\*" | grep -v "test\|example"; then
          echo "⚠️ eval() usage found - security risk!"
        else
          echo "✅ No eval() usage found"
        fi

  zk-proofs-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    name: ZK Proofs Validation
    needs: [unit-tests, advanced-security-scan]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    - name: Enable Corepack for Yarn 4
      run: |
        echo "Enabling Corepack for Yarn 4..."
        corepack enable
        corepack prepare yarn@4 --activate

    - name: Setup Yarn 4 cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Yarn 4..."
        yarn install --immutable

    - name: Validate ZK proofs structure
      run: |
        echo "Validating ZK proofs structure..."
        if [ -d "src/zk/proofs" ]; then
          echo "✅ ZK proofs directory exists"
          ls -la src/zk/proofs/
        else
          echo "⚠️ ZK proofs directory not found"
        fi

    - name: Check ZK proof files
      run: |
        echo "Checking ZK proof files..."
        if [ -f "src/zk/encryption_proof.circom" ]; then
          echo "✅ Encryption proof circuit found"
        else
          echo "⚠️ Encryption proof circuit not found"
        fi

    - name: Validate ZK configuration
      run: |
        echo "Validating ZK configuration..."
        if [ -f "src/zk/package.json" ]; then
          echo "✅ ZK package.json found"
          cat src/zk/package.json | jq '.scripts | keys' || echo "No scripts found"
        else
          echo "⚠️ ZK package.json not found"
        fi

  full-integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    name: Full Integration Test
    needs: [unit-tests, integration-tests, docker-validation, security-audit, advanced-security-scan, zk-proofs-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature/docker'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Enable Corepack for Yarn 4
      run: |
        echo "Enabling Corepack for Yarn 4..."
        corepack enable
        corepack prepare yarn@4 --activate

    - name: Setup Yarn 4 cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          .yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Yarn 4..."
        yarn install --immutable

    - name: Build project
      run: |
        echo "Building project..."
        yarn build

    - name: Run comprehensive test suite
      run: |
        echo "Running comprehensive test suite..."
        echo "1. Unit tests..."
        yarn test
        echo "2. Coverage tests..."
        yarn test:coverage

    - name: Test CLI functionality
      run: |
        echo "Testing CLI functionality..."
        yarn setup:agent --help || echo "Setup agent help command executed"

    - name: Generate test summary
      if: always()
      run: |
        echo "## Full Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Project built successfully" >> $GITHUB_STEP_SUMMARY
        echo "✅ All test suites executed" >> $GITHUB_STEP_SUMMARY
        echo "✅ CLI tools validated" >> $GITHUB_STEP_SUMMARY
        echo "✅ ZK proofs structure verified" >> $GITHUB_STEP_SUMMARY

  test-report:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    name: Test Report Generation
    needs: [unit-tests, integration-tests, docker-validation, security-audit, advanced-security-scan, zk-proofs-validation]
    if: always()

    steps:
    - name: Generate test report
      run: |
        echo "## Agent Communication MCP CI Test Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Validation**: ${{ needs.docker-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Advanced Security Scan**: ${{ needs.advanced-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ZK Proofs Validation**: ${{ needs.zk-proofs-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.docker-validation.result }}" == "success" ] && [ "${{ needs.security-audit.result }}" == "success" ] && [ "${{ needs.advanced-security-scan.result }}" == "success" ] && [ "${{ needs.zk-proofs-validation.result }}" == "success" ]; then
          echo "🎉 **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some tests failed. Please review the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ci-test-results-${{ github.run_id }}
        path: |
          dist/
          coverage/
          test-results/
          **/logs/
        retention-days: 7

    - name: Upload Docker artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-artifacts-${{ github.run_id }}
        path: |
          .dockerignore
          Dockerfile
          docker-compose*.yml
        retention-days: 7
